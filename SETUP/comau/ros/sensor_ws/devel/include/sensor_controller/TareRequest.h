// Generated by gencpp from file sensor_controller/TareRequest.msg
// DO NOT EDIT!


#ifndef SENSOR_CONTROLLER_MESSAGE_TAREREQUEST_H
#define SENSOR_CONTROLLER_MESSAGE_TAREREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_controller
{
template <class ContainerAllocator>
struct TareRequest_
{
  typedef TareRequest_<ContainerAllocator> Type;

  TareRequest_()
    : tare(false)  {
    }
  TareRequest_(const ContainerAllocator& _alloc)
    : tare(false)  {
  (void)_alloc;
    }



   typedef uint8_t _tare_type;
  _tare_type tare;





  typedef boost::shared_ptr< ::sensor_controller::TareRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_controller::TareRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TareRequest_

typedef ::sensor_controller::TareRequest_<std::allocator<void> > TareRequest;

typedef boost::shared_ptr< ::sensor_controller::TareRequest > TareRequestPtr;
typedef boost::shared_ptr< ::sensor_controller::TareRequest const> TareRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_controller::TareRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_controller::TareRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_controller::TareRequest_<ContainerAllocator1> & lhs, const ::sensor_controller::TareRequest_<ContainerAllocator2> & rhs)
{
  return lhs.tare == rhs.tare;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_controller::TareRequest_<ContainerAllocator1> & lhs, const ::sensor_controller::TareRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_controller::TareRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_controller::TareRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_controller::TareRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_controller::TareRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_controller::TareRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_controller::TareRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_controller::TareRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "619a849ead4ba25c683058cb0318dd75";
  }

  static const char* value(const ::sensor_controller::TareRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x619a849ead4ba25cULL;
  static const uint64_t static_value2 = 0x683058cb0318dd75ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_controller::TareRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_controller/TareRequest";
  }

  static const char* value(const ::sensor_controller::TareRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_controller::TareRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool tare\n"
;
  }

  static const char* value(const ::sensor_controller::TareRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_controller::TareRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tare);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TareRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_controller::TareRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_controller::TareRequest_<ContainerAllocator>& v)
  {
    s << indent << "tare: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tare);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_CONTROLLER_MESSAGE_TAREREQUEST_H
