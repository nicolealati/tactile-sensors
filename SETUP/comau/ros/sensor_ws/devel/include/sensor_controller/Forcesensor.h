// Generated by gencpp from file sensor_controller/Forcesensor.msg
// DO NOT EDIT!


#ifndef SENSOR_CONTROLLER_MESSAGE_FORCESENSOR_H
#define SENSOR_CONTROLLER_MESSAGE_FORCESENSOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_controller
{
template <class ContainerAllocator>
struct Forcesensor_
{
  typedef Forcesensor_<ContainerAllocator> Type;

  Forcesensor_()
    : thumb()
    , index()
    , middle()
    , ring()
    , little()  {
    }
  Forcesensor_(const ContainerAllocator& _alloc)
    : thumb(_alloc)
    , index(_alloc)
    , middle(_alloc)
    , ring(_alloc)
    , little(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _thumb_type;
  _thumb_type thumb;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _index_type;
  _index_type index;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _middle_type;
  _middle_type middle;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _ring_type;
  _ring_type ring;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _little_type;
  _little_type little;





  typedef boost::shared_ptr< ::sensor_controller::Forcesensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_controller::Forcesensor_<ContainerAllocator> const> ConstPtr;

}; // struct Forcesensor_

typedef ::sensor_controller::Forcesensor_<std::allocator<void> > Forcesensor;

typedef boost::shared_ptr< ::sensor_controller::Forcesensor > ForcesensorPtr;
typedef boost::shared_ptr< ::sensor_controller::Forcesensor const> ForcesensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_controller::Forcesensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_controller::Forcesensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_controller::Forcesensor_<ContainerAllocator1> & lhs, const ::sensor_controller::Forcesensor_<ContainerAllocator2> & rhs)
{
  return lhs.thumb == rhs.thumb &&
    lhs.index == rhs.index &&
    lhs.middle == rhs.middle &&
    lhs.ring == rhs.ring &&
    lhs.little == rhs.little;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_controller::Forcesensor_<ContainerAllocator1> & lhs, const ::sensor_controller::Forcesensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_controller::Forcesensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_controller::Forcesensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_controller::Forcesensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_controller::Forcesensor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_controller::Forcesensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_controller::Forcesensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_controller::Forcesensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e47c7f48cddbe1ac7a44256833731770";
  }

  static const char* value(const ::sensor_controller::Forcesensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe47c7f48cddbe1acULL;
  static const uint64_t static_value2 = 0x7a44256833731770ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_controller::Forcesensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_controller/Forcesensor";
  }

  static const char* value(const ::sensor_controller::Forcesensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_controller::Forcesensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] thumb\n"
"float64[] index\n"
"float64[] middle\n"
"float64[] ring\n"
"float64[] little\n"
;
  }

  static const char* value(const ::sensor_controller::Forcesensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_controller::Forcesensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thumb);
      stream.next(m.index);
      stream.next(m.middle);
      stream.next(m.ring);
      stream.next(m.little);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Forcesensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_controller::Forcesensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_controller::Forcesensor_<ContainerAllocator>& v)
  {
    s << indent << "thumb[]" << std::endl;
    for (size_t i = 0; i < v.thumb.size(); ++i)
    {
      s << indent << "  thumb[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.thumb[i]);
    }
    s << indent << "index[]" << std::endl;
    for (size_t i = 0; i < v.index.size(); ++i)
    {
      s << indent << "  index[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.index[i]);
    }
    s << indent << "middle[]" << std::endl;
    for (size_t i = 0; i < v.middle.size(); ++i)
    {
      s << indent << "  middle[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.middle[i]);
    }
    s << indent << "ring[]" << std::endl;
    for (size_t i = 0; i < v.ring.size(); ++i)
    {
      s << indent << "  ring[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ring[i]);
    }
    s << indent << "little[]" << std::endl;
    for (size_t i = 0; i < v.little.size(); ++i)
    {
      s << indent << "  little[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.little[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_CONTROLLER_MESSAGE_FORCESENSOR_H
